import logging
import aiohttp
from typing import Optional, Dict
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class CurrencyConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.rates: Dict[str, float] = {}
        self.last_update: Optional[datetime] = None
        self.cache_duration = timedelta(hours=24)  # –ö—É—Ä—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞
    
    async def update_rates(self) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ API
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API exchangerate-api.com
            async with aiohttp.ClientSession() as session:
                url = "https://api.exchangerate-api.com/v4/latest/CNY"
                
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        self.rates = {
                            "USD": data["rates"].get("USD", 0.14),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                            "RUB": data["rates"].get("RUB", 13.0)   # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                        }
                        self.last_update = datetime.now()
                        
                        logger.info(f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã: 1 CNY = {self.rates['USD']:.4f} USD, {self.rates['RUB']:.2f} RUB")
                        return True
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: HTTP {response.status}")
                        return False
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
            return False
    
    async def get_rates(self) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {"USD": rate, "RUB": rate}
        –≥–¥–µ rate - —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç 1 CNY –≤ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ
        """
        # –ï—Å–ª–∏ –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if not self.rates:
            logger.warning("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ")
            self.rates = {
                "USD": 0.14,   # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 CNY = 0.14 USD
                "RUB": 13.0    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 CNY = 13 RUB
            }
        
        return self.rates
    
    async def convert(self, amount_cny: float) -> Dict[str, float]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –∏–∑ CNY –≤ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
        
        Args:
            amount_cny: –°—É–º–º–∞ –≤ CNY
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å—É–º–º–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö:
            {"CNY": amount, "USD": amount, "RUB": amount}
        """
        rates = await self.get_rates()
        
        return {
            "CNY": round(amount_cny, 2),
            "USD": round(amount_cny * rates["USD"], 2),
            "RUB": round(amount_cny * rates["RUB"], 2)
        }
    
    def format_price(self, prices: Dict[str, float]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            prices: –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ {"CNY": ..., "USD": ..., "RUB": ...}
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–∞–º–∏
        """
        return (
            f"üí¥ {prices['CNY']:.2f} CNY\n"
            f"üíµ ${prices['USD']:.2f} USD\n"
            f"üí∏ {prices['RUB']:.2f} RUB"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
currency_converter = CurrencyConverter()

