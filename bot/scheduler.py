import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot

from config import config
from database.db import db
from api.buff_api import buff_client
from api.currency_converter import currency_converter

logger = logging.getLogger(__name__)


class PriceScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
    
    async def check_prices(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å"""
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã
            users_to_check = await db.get_users_to_check()
            
            if not users_to_check:
                logger.debug("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
                return
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã –¥–ª—è {len(users_to_check)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–æ–≤–∞—Ä—ã
            for user in users_to_check:
                try:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} ({len(user.items)} —Ç–æ–≤–∞—Ä–æ–≤)")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    items_to_check = user.items
                    
                    for item in items_to_check:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                            price_data = await buff_client.get_item_price(item.goods_id)
                            
                            if not price_data:
                                logger.warning(
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item.goods_id}"
                                )
                                continue
                            
                            current_price = price_data["min_price"]
                            prices = price_data.get("prices", {})
                            old_price = item.last_price
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                            await db.add_price_history(item.id, current_price)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞
                            if old_price is None:
                                # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                                await db.update_item_price(item.id, current_price)
                                logger.info(
                                    f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {current_price} "
                                    f"–¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item.goods_id}"
                                )
                            elif current_price != old_price:
                                # –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                diff = current_price - old_price
                                percent = (diff / old_price) * 100
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
                                await db.update_item_price(item.id, current_price)
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                if diff > 0:
                                    emoji = "üìà"
                                    change_text = f"+{diff:.2f} CNY (+{percent:.1f}%)"
                                else:
                                    emoji = "üìâ"
                                    change_text = f"{diff:.2f} CNY ({percent:.1f}%)"
                                
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
                                price_text = currency_converter.format_price(prices) if prices else f"üíµ {current_price:.2f} CNY"
                                old_prices = await currency_converter.convert(old_price) if old_price else {}
                                old_price_text = currency_converter.format_price(old_prices) if old_prices else f"üíµ {old_price:.2f} CNY"
                                
                                message = (
                                    f"{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>\n\n"
                                    f"üì¶ {item.market_hash_name}\n"
                                    f"üîó goods_id: {item.goods_id}\n\n"
                                    f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b>\n{price_text}\n\n"
                                    f"üíæ <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b>\n{old_price_text}\n\n"
                                    f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_text}\n\n"
                                    f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                                )
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                try:
                                    await self.bot.send_message(
                                        chat_id=user.user_id,
                                        text=message
                                    )
                                    logger.info(
                                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} "
                                        f"–æ —Ç–æ–≤–∞—Ä–µ {item.goods_id}"
                                    )
                                except Exception as e:
                                    logger.error(
                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                                        f"{user.user_id}: {e}"
                                    )
                            else:
                                logger.debug(
                                    f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ {item.goods_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: "
                                    f"{current_price}"
                                )
                        
                        except Exception as e:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {item.goods_id}: {e}"
                            )
                            continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.update_user_last_check(user.user_id)
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}"
                    )
                    continue
            
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")
    
    async def cleanup_old_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...")
        try:
            await db.cleanup_old_price_history(days=7)
            logger.info("–°—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def update_currency_rates(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        logger.info("–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
        try:
            success = await currency_converter.update_rates()
            if success:
                logger.info("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –∫–æ–º—É –ø–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å)
        self.scheduler.add_job(
            self.check_prices,
            trigger="interval",
            minutes=1,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ–º—É –ø–æ—Ä–∞
            id="check_prices",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤",
            replace_existing=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 3:00)
        self.scheduler.add_job(
            self.cleanup_old_history,
            trigger="cron",
            day_of_week="sun",
            hour=3,
            minute=0,
            id="cleanup_history",
            name="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω",
            replace_existing=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00)
        self.scheduler.add_job(
            self.update_currency_rates,
            trigger="cron",
            hour=0,
            minute=0,
            id="update_currency",
            name="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç",
            replace_existing=True
        )
        
        self.scheduler.start()
        self.is_running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.scheduler.shutdown()
        self.is_running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def init_scheduler(bot: Bot) -> PriceScheduler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    return PriceScheduler(bot)
