import logging
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any

from config import config
from database.db import db
from api.buff_api import buff_client
from api.currency_converter import currency_converter
from bot.keyboards import (
    get_main_menu_keyboard,
    get_tracked_items_keyboard,
    get_item_actions_keyboard,
    get_confirm_delete_keyboard,
    get_cancel_keyboard,
    get_back_to_menu_keyboard,
    get_settings_keyboard,
    get_interval_keyboard,
    get_notifications_keyboard
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class AddItemStates(StatesGroup):
    waiting_for_goods_id = State()


# === Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ===

async def check_user_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"""
    return user_id in config.ALLOWED_USER_IDS


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not await check_user_access(user_id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.add_user(user_id)
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Å–∫–∏–Ω—ã CS2 —Å —Å–∞–π—Ç–∞ Buff.163.com\n\n"
        "üìä –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    
    if not await check_user_access(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'\n"
        "2. –ù–∞–π–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞ buff.163.com\n"
        "3. –í URL —Ç–æ–≤–∞—Ä–∞ –Ω–∞–π–¥–∏—Ç–µ goods_id\n"
        "   –ü—Ä–∏–º–µ—Ä: https://buff.163.com/goods/<b>43012</b>\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –±–æ—Ç—É\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/list - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/now - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        f"–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ {config.CHECK_INTERVAL} –º–∏–Ω—É—Ç "
        "–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."
    )
    
    await message.answer(help_text, reply_markup=get_back_to_menu_keyboard())


@router.message(Command("list"))
async def cmd_list(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    user_id = message.from_user.id
    
    if not await check_user_access(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    items = await db.get_user_items(user_id)
    
    if not items:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await message.answer(
        f"üìã <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(items)}):</b>",
        reply_markup=get_tracked_items_keyboard(items)
    )


@router.message(Command("now"))
async def cmd_now(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /now - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã"""
    user_id = message.from_user.id
    
    if not await check_user_access(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    items = await db.get_user_items(user_id)
    
    if not items:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    status_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")
    
    response_text = "üí∞ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>\n\n"
    
    for item in items:
        price_data = await buff_client.get_item_price(item.goods_id)
        
        if price_data:
            current_price = price_data["min_price"]
            prices = price_data.get("prices", {})
            old_price = item.last_price
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            change_text = ""
            if old_price:
                diff = current_price - old_price
                percent = (diff / old_price) * 100
                
                if diff > 0:
                    change_text = f" üìà +{diff:.2f} CNY (+{percent:.1f}%)"
                elif diff < 0:
                    change_text = f" üìâ {diff:.2f} CNY ({percent:.1f}%)"
                else:
                    change_text = " ‚û°Ô∏è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            price_text = currency_converter.format_price(prices) if prices else f"{current_price:.2f} CNY"
            
            response_text += (
                f"<b>{item.market_hash_name}</b>\n"
                f"{price_text}\n"
                f"{change_text}\n"
                f"üîó goods_id: {item.goods_id}\n\n"
            )
        else:
            response_text += (
                f"<b>{item.market_hash_name}</b>\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É\n"
                f"üîó goods_id: {item.goods_id}\n\n"
            )
    
    await status_msg.delete()
    await message.answer(response_text, reply_markup=get_back_to_menu_keyboard())


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ ===

@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "add_item")
async def callback_add_item(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ goods_id —Ç–æ–≤–∞—Ä–∞ —Å —Å–∞–π—Ç–∞ Buff.163.com\n\n"
        "üìå –ö–∞–∫ –Ω–∞–π—Ç–∏ goods_id:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ buff.163.com\n"
        "2. –í –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–π–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ /goods/\n"
        "   –ü—Ä–∏–º–µ—Ä: https://buff.163.com/goods/<b>43012</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddItemStates.waiting_for_goods_id)
    await callback.answer()


@router.callback_query(F.data == "list_items")
async def callback_list_items(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = callback.from_user.id
    items = await db.get_user_items(user_id)
    
    if not items:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"üìã <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(items)}):</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_tracked_items_keyboard(items)
        )
    
    await callback.answer()


@router.callback_query(F.data == "current_prices")
async def callback_current_prices(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã"""
    user_id = callback.from_user.id
    items = await db.get_user_items(user_id)
    
    if not items:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        return
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ü–µ–Ω—ã...")
    
    response_text = "üí∞ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>\n\n"
    
    for item in items:
        price_data = await buff_client.get_item_price(item.goods_id)
        
        if price_data:
            current_price = price_data["min_price"]
            prices = price_data.get("prices", {})
            old_price = item.last_price
            
            change_text = ""
            if old_price:
                diff = current_price - old_price
                percent = (diff / old_price) * 100
                
                if diff > 0:
                    change_text = f" üìà +{diff:.2f} CNY (+{percent:.1f}%)"
                elif diff < 0:
                    change_text = f" üìâ {diff:.2f} CNY ({percent:.1f}%)"
                else:
                    change_text = " ‚û°Ô∏è"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            price_text = currency_converter.format_price(prices) if prices else f"{current_price:.2f} CNY"
            
            response_text += (
                f"<b>{item.market_hash_name}</b>\n"
                f"{price_text}\n"
                f"{change_text}\n\n"
            )
        else:
            response_text += (
                f"<b>{item.market_hash_name}</b>\n"
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
            )
    
    try:
        await callback.message.edit_text(
            response_text, 
            reply_markup=get_back_to_menu_keyboard()
        )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
        if "message is not modified" not in str(e):
            raise


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'\n"
        "2. –ù–∞–π–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞ buff.163.com\n"
        "3. –í URL —Ç–æ–≤–∞—Ä–∞ –Ω–∞–π–¥–∏—Ç–µ goods_id\n"
        "   –ü—Ä–∏–º–µ—Ä: https://buff.163.com/goods/<b>43012</b>\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –±–æ—Ç—É\n\n"
        "<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        f"–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ {config.CHECK_INTERVAL} –º–∏–Ω—É—Ç "
        "–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("item_info_"))
async def callback_item_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    items = await db.get_user_items(user_id)
    item = next((i for i in items if i.id == item_id), None)
    
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    price_data = await buff_client.get_item_price(item.goods_id)
    
    if price_data:
        current_price = price_data["min_price"]
        prices = price_data.get("prices", {})
        old_price = item.last_price
        
        change_text = ""
        if old_price:
            diff = current_price - old_price
            percent = (diff / old_price) * 100
            
            if diff > 0:
                change_text = f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{diff:.2f} CNY (+{percent:.1f}%)"
            elif diff < 0:
                change_text = f"\nüìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:.2f} CNY ({percent:.1f}%)"
            else:
                change_text = "\n‚û°Ô∏è –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        price_text = currency_converter.format_price(prices) if prices else f"üíµ {current_price:.2f} CNY"
        
        last_price_text = f"üíæ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è: {old_price:.2f} CNY\n" if old_price else ""
        
        info_text = (
            f"üì¶ <b>{item.market_hash_name}</b>\n\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>\n{price_text}\n"
            f"{change_text}\n\n"
            f"{last_price_text}"
            f"üîó goods_id: {item.goods_id}\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {item.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
    else:
        info_text = (
            f"üì¶ <b>{item.market_hash_name}</b>\n\n"
            f"üîó goods_id: {item.goods_id}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"
            f"üíæ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è: {item.last_price:.2f} CNY\n" if item.last_price else ""
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {item.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_item_actions_keyboard(item_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("refresh_price_"))
async def callback_refresh_price(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
    item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    items = await db.get_user_items(user_id)
    item = next((i for i in items if i.id == item_id), None)
    
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    price_data = await buff_client.get_item_price(item.goods_id)
    
    if price_data:
        current_price = price_data["min_price"]
        prices = price_data.get("prices", {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await db.update_item_price(item_id, current_price)
        await db.add_price_history(item_id, current_price)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        price_text = currency_converter.format_price(prices) if prices else f"üíµ {current_price:.2f} CNY"
        
        await callback.message.answer(
            f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üì¶ {item.market_hash_name}\n"
            f"{price_text}"
        )
    else:
        await callback.message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {item.market_hash_name}"
        )


@router.callback_query(F.data.startswith("remove_item_"))
async def callback_remove_item(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    items = await db.get_user_items(user_id)
    item = next((i for i in items if i.id == item_id), None)
    
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üóë <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?</b>\n\n"
        f"üì¶ {item.market_hash_name}\n"
        f"üîó goods_id: {item.goods_id}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_keyboard(item_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def callback_confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    items = await db.get_user_items(user_id)
    item = next((i for i in items if i.id == item_id), None)
    
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    item_name = item.market_hash_name
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    success = await db.remove_user_subscription(user_id, item_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
            f"üì¶ {item_name}",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ FSM ===

@router.message(AddItemStates.waiting_for_goods_id)
async def process_goods_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ goods_id"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π goods_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 43012",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    goods_id = int(message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    is_subscribed = await db.is_user_subscribed(user_id, goods_id)
    if is_subscribed:
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    status_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    price_data = await buff_client.get_item_price(goods_id)
    
    if not price_data:
        await status_msg.edit_text(
            f"‚ùå –¢–æ–≤–∞—Ä —Å goods_id {goods_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
    market_hash_name = price_data["market_hash_name"]
    min_price = price_data["min_price"]
    prices = price_data.get("prices", {})
    
    await db.add_user_subscription(
        user_id=user_id,
        goods_id=goods_id,
        market_hash_name=market_hash_name,
        initial_price=min_price
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    item = await db.get_item_by_goods_id(goods_id)
    if item:
        await db.add_price_history(item.id, min_price)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    price_text = currency_converter.format_price(prices) if prices else f"üíµ {min_price:.2f} CNY"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    interval_text = f"{user.check_interval} –º–∏–Ω—É—Ç" if user else f"{config.CHECK_INTERVAL} –º–∏–Ω—É—Ç"
    
    await status_msg.edit_text(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!</b>\n\n"
        f"üì¶ {market_hash_name}\n"
        f"üîó goods_id: {goods_id}\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>\n{price_text}\n\n"
        f"üîî –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ {interval_text}.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.clear()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===

@router.callback_query(F.data == "settings")
async def callback_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    interval = user.check_interval
    if interval < 60:
        interval_text = f"{interval} –º–∏–Ω—É—Ç"
    elif interval == 60:
        interval_text = "1 —á–∞—Å"
    elif interval < 1440:
        hours = interval // 60
        interval_text = f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if hours < 5 else '—á–∞—Å–æ–≤'}"
    else:
        interval_text = "24 —á–∞—Å–∞"
    
    notifications_text = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {interval_text}\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "settings_interval")
async def callback_settings_interval(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return
    
    interval_text = (
        "‚è± <b>–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{user.check_interval} –º–∏–Ω—É—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤):"
    )
    
    await callback.message.edit_text(
        interval_text,
        reply_markup=get_interval_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_interval_"))
async def callback_set_interval(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    user_id = callback.from_user.id
    interval = int(callback.data.split("_")[2])
    
    try:
        await db.update_user_settings(user_id, check_interval=interval)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if interval < 60:
            interval_text = f"{interval} –º–∏–Ω—É—Ç"
        elif interval == 60:
            interval_text = "1 —á–∞—Å"
        elif interval < 1440:
            hours = interval // 60
            interval_text = f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if hours < 5 else '—á–∞—Å–æ–≤'}"
        else:
            interval_text = "24 —á–∞—Å–∞"
        
        await callback.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval_text}", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        user = await db.get_user(user_id)
        notifications_text = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {interval_text}\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=get_settings_keyboard()
        )
    
    except ValueError as e:
        await callback.answer(f"‚ùå {str(e)}", show_alert=True)


@router.callback_query(F.data == "settings_notifications")
async def callback_settings_notifications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    notifications_text = (
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
        "–ö–æ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã "
        "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        notifications_text,
        reply_markup=get_notifications_keyboard(user.notifications_enabled)
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def callback_toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    new_status = not user.notifications_enabled
    await db.update_user_settings(user_id, notifications_enabled=new_status)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    notifications_text = (
        "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n\n"
        "–ö–æ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã "
        "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        notifications_text,
        reply_markup=get_notifications_keyboard(new_status)
    )

